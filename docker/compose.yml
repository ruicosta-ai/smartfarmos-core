services:
  db:
    image: postgres:16-alpine
    container_name: sfos-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: sfos_core
      POSTGRES_USER: core
      POSTGRES_PASSWORD: core
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U core -d sfos_core"]
      interval: 5s
      timeout: 3s
      retries: 20

  mqtt:
    image: eclipse-mosquitto:2
    container_name: sfos-mqtt
    restart: unless-stopped
    ports:
      - "${MQTT_PUBLISHED_PORT:-1884:1883}"
    volumes:
      - ./mosquitto:/mosquitto/config
      - mqtt_data:/mosquitto/data
      - mqtt_log:/mosquitto/log
    healthcheck:
      # mosquitto_sub existe na imagem oficial
      test: ["CMD-SHELL", "mosquitto_sub -h 127.0.0.1 -t '$$SYS/#' -C 1 -W 3 > /dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  core:
    image: ghcr.io/ruicosta-ai/smartfarmos-core:latest
    # platform: linux/amd64   # descomenta se precisares no teu host/runner
    container_name: sfos-core
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      CORS_ORIGINS: http://localhost:4000
      NODE_ENV: development
    depends_on:
      db:
        condition: service_healthy
      mqtt:
        condition: service_healthy
    ports:
      - "3000:3000"
    healthcheck:
      # tenta curl; se n√£o existir, tenta wget
      test: ["CMD-SHELL", "curl -sf http://127.0.0.1:3000/health || wget -qO- http://127.0.0.1:3000/health | grep -q '\"db\":\"up\"'"]
      interval: 5s
      timeout: 5s
      retries: 30

volumes:
  db_data:
  mqtt_data:
  mqtt_log: